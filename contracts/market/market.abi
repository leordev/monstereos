{
  "____comment": "This file was generated by eosio-abigen. DO NOT EDIT - 2018-07-26T07:34:54",
  "version": "eosio::abi/1.0",
  "types": [{
      "new_type_name": "uuid",
      "type": "uint64"
    },{
      "new_type_name": "battle_mode",
      "type": "uint8"
    }
  ],
  "structs": [{
      "name": "st_pets",
      "base": "",
      "fields": [{
          "name": "id",
          "type": "uuid"
        },{
          "name": "owner",
          "type": "name"
        },{
          "name": "name",
          "type": "string"
        },{
          "name": "type",
          "type": "uint8"
        },{
          "name": "created_at",
          "type": "uint32"
        },{
          "name": "death_at",
          "type": "uint32"
        },{
          "name": "last_fed_at",
          "type": "uint32"
        },{
          "name": "last_bed_at",
          "type": "uint32"
        },{
          "name": "last_awake_at",
          "type": "uint32"
        },{
          "name": "last_play_at",
          "type": "uint32"
        },{
          "name": "last_shower_at",
          "type": "uint32"
        }
      ]
    },{
      "name": "st_pet_inbatt",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    },{
      "name": "st_account",
      "base": "",
      "fields": [{
          "name": "balance",
          "type": "asset"
        }
      ]
    },{
      "name": "st_elements",
      "base": "",
      "fields": [{
          "name": "id",
          "type": "uint64"
        },{
          "name": "ratios",
          "type": "uint8[]"
        }
      ]
    },{
      "name": "st_pet_types",
      "base": "",
      "fields": [{
          "name": "id",
          "type": "uint64"
        },{
          "name": "elements",
          "type": "uint8[]"
        }
      ]
    },{
      "name": "st_commit",
      "base": "",
      "fields": [{
          "name": "player",
          "type": "name"
        },{
          "name": "commitment",
          "type": "checksum256"
        },{
          "name": "reveal",
          "type": "checksum256"
        }
      ]
    },{
      "name": "st_pet_stat",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        },{
          "name": "pet_type",
          "type": "uint8"
        },{
          "name": "player",
          "type": "name"
        },{
          "name": "hp",
          "type": "uint8"
        }
      ]
    },{
      "name": "st_battle",
      "base": "",
      "fields": [{
          "name": "host",
          "type": "name"
        },{
          "name": "mode",
          "type": "battle_mode"
        },{
          "name": "started_at",
          "type": "uint32"
        },{
          "name": "last_move_at",
          "type": "uint32"
        },{
          "name": "commits",
          "type": "st_commit[]"
        },{
          "name": "pets_stats",
          "type": "st_pet_stat[]"
        }
      ]
    },{
      "name": "st_offers",
      "base": "",
      "fields": [{
          "name": "id",
          "type": "uuid"
        },{
          "name": "user",
          "type": "name"
        },{
          "name": "type",
          "type": "uint8"
        },{
          "name": "pet_id",
          "type": "uuid"
        },{
          "name": "new_owner",
          "type": "name"
        },{
          "name": "value",
          "type": "asset"
        },{
          "name": "placed_at",
          "type": "uint32"
        },{
          "name": "ends_at",
          "type": "uint32"
        },{
          "name": "transfer_ends_at",
          "type": "uint32"
        }
      ]
    },{
      "name": "offerpet",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        },{
          "name": "newowner",
          "type": "name"
        },{
          "name": "until",
          "type": "uint32"
        },{
          "name": "amount",
          "type": "uint64"
        }
      ]
    },{
      "name": "removeoffer",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    },{
      "name": "claimpet",
      "base": "",
      "fields": [{
          "name": "oldowner",
          "type": "name"
        },{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    },{
      "name": "bidpet",
      "base": "",
      "fields": [{
          "name": "pet_id",
          "type": "uuid"
        },{
          "name": "bidder",
          "type": "name"
        },{
          "name": "until",
          "type": "uint32"
        },{
          "name": "amount",
          "type": "uint64"
        }
      ]
    },{
      "name": "removebid",
      "base": "",
      "fields": [{
          "name": "bidder",
          "type": "name"
        },{
          "name": "pet_id",
          "type": "uuid"
        }
      ]
    }
  ],
  "actions": [{
      "name": "offerpet",
      "type": "offerpet",
      "ricardian_contract": ""
    },{
      "name": "removeoffer",
      "type": "removeoffer",
      "ricardian_contract": "# CONTRACT FOR pet::removeoffer## ACTION NAME: removeoffer\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `owner` (name of monster owner)* `owner` (name of monster owner)\n* `pet_id` (identifier of monster)* `pet_id` (identifier of monster)\n\n\n### Intent### Intent\nINTENT. The intent of the `{{ removeoffer }}` action is to cancel the transfer of ownership of the given monster. Consequently the cost for RAM of the offer is removed.INTENT. The intent of the `{{ removeoffer }}` action is to cancel the transfer of ownership of the given monster. Consequently the cost for RAM of the offer is removed.\n\n\n### Term### Term\nTERM. This Contract expires after the execution of the code.TERM. This Contract expires after the execution of the code.\n"
    },{
      "name": "claimpet",
      "type": "claimpet",
      "ricardian_contract": "# CONTRACT FOR pet::claimpet## ACTION NAME: claimpet\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `oldowner` (identifier of previous owner)* `oldowner` (identifier of previous owner)\n* `pet_id` (identifier of monster)* `pet_id` (identifier of monster)\n\n### Intent### Intent\nINTENT. The intent of the `{{ claimpet }}` action is to finalize the ownership transfer of the given monster.INTENT. The intent of the `{{ claimpet }}` action is to finalize the ownership transfer of the given monster.\n\nI {{ signer }} confirm that the new owner will take care of the monster and that the new owner will pay for the RAM needed (~295 bytes).I {{ signer }} confirm that the new owner will take care of the monster and that the new owner will pay for the RAM needed (~295 bytes).\n\nFurthermore, I attest under penalty of perjury that the new owner is not afraid of keeping a monster as her pet.Furthermore, I attest under penalty of perjury that the new owner is not afraid of keeping a monster as her pet.\n\nThe state of the monster will change over time based on the interaction with the new asset. If the monster is not cared of according to the general rules of monster keeping the monster might die. It starves to death after 20 hours.The state of the monster will change over time based on the interaction with the new asset. If the monster is not cared of according to the general rules of monster keeping the monster might die. It starves to death after 20 hours.\n\n### Term### Term\nTERM. This Contract expires after the monster died and was deleted.TERM. This Contract expires after the monster died and was deleted.\n"
    },{
      "name": "bidpet",
      "type": "bidpet",
      "ricardian_contract": "# CONTRACT FOR pet::bidpet## ACTION NAME: bidpet\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `pet_id` (identifier of the monster)* `pet_id` (identifier of the monster)\n* `bidder` (name of the bidder)* `bidder` (name of the bidder)\n* `until` (time when you want to give back the monster to previous owner)* `until` (time when you want to give back the monster to previous owner)\n* `amount` (amount of EOS bidder would pay for this bid to be executed)* `amount` (amount of EOS bidder would pay for this bid to be executed)\n### Intent### Intent\nINTENT. The intent of the `{{ bidpet }}` action is to place a binding bid for transfer of ownership of the given monster to {{ bidder }}. The ownership should last until `{{ until }}`. {{bidder}} will pay `{{amount}}` EOS for the transfer.INTENT. The intent of the `{{ bidpet }}` action is to place a binding bid for transfer of ownership of the given monster to {{ bidder }}. The ownership should last until `{{ until }}`. {{bidder}} will pay `{{amount}}` EOS for the transfer.\n\n\n### Term### Term\nTERM. This Contract expires after the bid was matched with an offer and bidder paid the amount or has been removed.TERM. This Contract expires after the bid was matched with an offer and bidder paid the amount or has been removed.\n"
    },{
      "name": "removebid",
      "type": "removebid",
      "ricardian_contract": "# CONTRACT FOR pet::removebid## ACTION NAME: removebid\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `pet_id` (identifier of monster)* `pet_id` (identifier of monster)\n* `bidder` (name of bidder)* `bidder` (name of bidder)\n\n### Intent### Intent\nINTENT. The intent of the `{{ removebid }}` action is to cancel the bid for transfer of ownership of the given monster. Consequently the cost for RAM of the bid is removed.INTENT. The intent of the `{{ removebid }}` action is to cancel the bid for transfer of ownership of the given monster. Consequently the cost for RAM of the bid is removed.\n\n\n### Term### Term\nTERM. This Contract expires after the execution of the code.TERM. This Contract expires after the execution of the code.\n"
    }
  ],
  "tables": [{
      "name": "pets",
      "index_type": "i64",
      "key_names": [
        "id"
      ],
      "key_types": [
        "uuid"
      ],
      "type": "st_pets"
    },{
      "name": "petinbattles",
      "index_type": "i64",
      "key_names": [
        "pet_id"
      ],
      "key_types": [
        "uuid"
      ],
      "type": "st_pet_inbatt"
    },{
      "name": "accounts",
      "index_type": "i64",
      "key_names": [
        "balance"
      ],
      "key_types": [
        "asset"
      ],
      "type": "st_account"
    },{
      "name": "elements",
      "index_type": "i64",
      "key_names": [
        "id"
      ],
      "key_types": [
        "uint64"
      ],
      "type": "st_elements"
    },{
      "name": "pettypes",
      "index_type": "i64",
      "key_names": [
        "id"
      ],
      "key_types": [
        "uint64"
      ],
      "type": "st_pet_types"
    },{
      "name": "battles",
      "index_type": "i64",
      "key_names": [
        "host"
      ],
      "key_types": [
        "name"
      ],
      "type": "st_battle"
    },{
      "name": "offers",
      "index_type": "i64",
      "key_names": [
        "id"
      ],
      "key_types": [
        "uuid"
      ],
      "type": "st_offers"
    }
  ],
  "ricardian_clauses": [{
      "id": "Warranty",
      "body": "WARRANTY. The invoker of the contract action shall uphold its Obligations under this Contract in a timely and workmanlike manner, using knowledge and recommendations for trading monsters.\n  \n"
    },{
      "id": "Dispute Resolution",
      "body": "DISPUTE RESOLUTION. Any controversies or disputes arising out of or relating to this Contract will be resolved by binding arbitration under the default rules set forth by the EOS.IO Blockchain. The arbitrator's award will be final, and judgment may be entered upon it by any court having proper jurisdiction. \n  \n"
    },{
      "id": "Entire Agreement",
      "body": "ENTIRE AGREEMENT. This Contract contains the entire agreement of the parties, and there are no other promises or conditions in any other agreement whether oral or written concerning the subject matter of this Contract. This Contract supersedes any prior written or oral agreements between the parties. \n\n"
    },{
      "id": "Severability",
      "body": "SEVERABILITY. If any provision of this Contract will be held to be invalid or unenforceable for any reason, the remaining provisions will continue to be valid and enforceable. If a court finds that any provision of this Contract is invalid or unenforceable, but that by limiting such provision it would become valid and enforceable, then such provision will be deemed to be written, construed, and enforced as so limited. \n\n"
    },{
      "id": "Amendment",
      "body": "AMENDMENT. This Contract may be modified or amended in writing by mutual agreement between the parties, if the writing is signed by the party obligated under the amendment. \n\n"
    },{
      "id": "Governing Law",
      "body": "GOVERNING LAW. This Contract shall be construed in accordance with the Maxims of Equity. \n\n"
    },{
      "id": "Notice",
      "body": "NOTICE. Any notice or communication required or permitted under this Contract shall be sufficiently given if published as part of the source code. \n\n"
    },{
      "id": "Waiver of Contractual Right",
      "body": "WAIVER OF CONTRACTUAL RIGHT. The failure of either party to enforce any provision of this Contract shall not be construed as a waiver or limitation of that party's right to subsequently enforce and compel strict compliance with every provision of this Contract. \n\n"
    },{
      "id": "Arbitrator's Fees to Prevailing Party",
      "body": "ARBITRATOR'S FEES TO PREVAILING PARTY. In any action arising hereunder or any separate action pertaining to the validity of this Agreement, both sides shall pay half the initial cost of arbitration, and the prevailing party shall be awarded reasonable arbitrator's fees and costs.\n  \n"
    },{
      "id": "Construction and Interpretation",
      "body": "CONSTRUCTION AND INTERPRETATION. The rule requiring construction or interpretation against the drafter is waived. The document shall be deemed as if it were drafted by both parties in a mutual effort. \n  \n"
    }
  ],
  "error_messages": [],
  "abi_extensions": []
}